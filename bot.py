# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞:
from bs4 import BeautifulSoup  # <-- –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
import re
import json
from cachetools import TTLCache, cached
import logging
import requests
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from datetime import datetime, timedelta
import xml.etree.ElementTree as ET
import pandas as pd
import pytz
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry


def create_session():
    session = requests.Session()
    retries = Retry(
        total=3,
        backoff_factor=0.5,
        status_forcelist=[500, 502, 503, 504]
    )
    session.mount('https://', HTTPAdapter(max_retries=retries))
    return session


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8116484548:AAFtMBtsnzAoWqxyMCZxPRUZlD39lM2xSgQ"
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
CRYPTO_IDS = {
    "bitcoin": "Bitcoin ü™ô",
    "ethereum": "Ethereum ‚õìÔ∏è",
    "tether": "Tether üíµ",
    "usd-coin": "USD Coin üí≤",
    "binance-coin": "BNB üíé",
    "ripple": "XRP ‚ú®",
    "cardano": "Cardano üî∑",
    "solana": "Solana ‚òÄÔ∏è",
    "dogecoin": "Dogecoin üê∂",
    "polkadot": "Polkadot üî¥",
    "shiba-inu": "Shiba Inu üêï",
    "avalanche": "Avalanche ‚ùÑÔ∏è",
    "chainlink": "Chainlink üîó",
    "litecoin": "Litecoin ≈Å",
    "uniswap": "Uniswap ü¶Ñ",
    "bitcoin-cash": "Bitcoin Cash üí∞",
    "algorand": "Algorand ‚ö°",
    "stellar": "Stellar üåü",
    "cosmos": "Cosmos üåå"}

CRYPTO_RECOMMENDATIONS = {
    "bitcoin": "Bitcoin ü™ô",
    "ethereum": "Ethereum ‚õìÔ∏è",
    "tether": "Tether üíµ",
    "usd-coin": "USD Coin üí≤"
}  # <-- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞

# –í–∞–ª—é—Ç—ã
CURRENCIES = ["USD", "EUR", "CNY"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
cache = TTLCache(maxsize=100, ttl=3600)
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –Ω–∞ MOEX
MOEX_CURRENCY_PAIRS = {
    "USD/RUB": "USD000UTSTOM",
    "EUR/RUB": "EUR_RUB__TOM"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

MOEX_API_URL = "https://iss.moex.com/iss/engines/currency/markets/selt/boards/CETS/securities.json"

CURRENCY_PAIRS = {
    "USD/RUB": "USD000UTSTOM",
    "EUR/RUB": "EUR_RUB__TOM",
}


def get_moex_currency_rate(pair_code):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã —Å MOEX"""
    try:
        params = {
            "securities": pair_code,
            "iss.meta": "off",
            "iss.json": "extended",
            "lang": "ru"
        }

        response = requests.get(MOEX_API_URL, params=params, timeout=10)

        if response.status_code == 200:
            data = response.json()

            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ marketdata
            market_data = data[1]['marketdata']
            if market_data:
                for item in market_data:
                    if item['SECID'] == pair_code:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—É—é
                        return str(item.get('MARKETPRICE')) + '-' + str(item.get('MARKETPRICE2'))

            logger.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {pair_code} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None

        logger.error(f"–û—à–∏–±–∫–∞ HTTP: {response.status_code}")
        return None

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return None
    except (KeyError, IndexError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None


def print_rates():
    """–í—ã–≤–æ–¥ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    h=(f"\n–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç MOEX –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}:\n")
    for pair_name, pair_code in CURRENCY_PAIRS.items():
        rate = get_moex_currency_rate(pair_code)
        if rate:
            h=h+ (f"{pair_name}: {(rate)} ‚ÇΩ\n")
        else:
            h='\n'
    return h


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ CoinGecko
@cached(cache)
def get_crypto_prices():
    try:
        url = 'https://api.coingecko.com/api/v3/simple/price'
        params = {
            'ids': ','.join(CRYPTO_IDS.keys()),
            'vs_currencies': 'usd'
        }
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CoinGecko: {str(e)}")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§
def get_financial_data():
    def get_key_rate():
        try:
            url = 'https://www.cbr.ru/hd_base/keyrate/'
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                table = soup.find('table', {'class': 'data'})

                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–µ–π—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–≤–∫—É
                for row in reversed(table.find_all('tr')):
                    cols = row.find_all('td')
                    if len(cols) >= 2:
                        date_str = cols[0].get_text(strip=True)
                        rate_str = cols[1].get_text(strip=True).replace(',', '.')

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
                        date = datetime.strptime(date_str, '%d.%m.%Y')
                        if date <= datetime.now():
                            return float(rate_str)
                return None
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {str(e)}")
            return None

    def get_currency_rates():
        try:
            response = requests.get('https://www.cbr.ru/scripts/XML_daily.asp', timeout=10)
            if response.status_code == 200:
                root = ET.fromstring(response.content)
                rates = {}

                for valute in root.findall('Valute'):
                    char_code = valute.find('CharCode').text
                    value = valute.find('Value').text.replace(',', '.')
                    nominal = valute.find('Nominal').text

                    if char_code in ['USD', 'EUR', 'CNY']:
                        rates[char_code] = round(float(value) / float(nominal), 4)
                return rates
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {str(e)}")
            return None

    result = {
        'key_rate': None,
        'USD': None,
        'EUR': None,
        'CNY': None
    }

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    currencies = get_currency_rates()
    if currencies:
        result.update(currencies)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É
    key_rate = get_key_rate()
    if key_rate is not None:
        result['key_rate'] = key_rate

    return result



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
def get_crypto_history(crypto_id, days=365):
    try:
        url = f"https://api.coingecko.com/api/v3/coins/{crypto_id}/market_chart"
        params = {
            "vs_currency": "usd",
            "days": days
        }
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return [price[1] for price in response.json()["prices"]]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ {crypto_id}: {str(e)}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–µ
def get_currency_history(currency, days=365):
    history = []
    try:
        for i in range(days):
            date = (datetime.now() - timedelta(days=i)).strftime("%d/%m/%Y")
            url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={date}"
            response = requests.get(url)
            if response.status_code == 200:
                root = ET.fromstring(response.content)
                for valute in root.findall('Valute'):
                    if valute.find('CharCode').text == currency:
                        value = valute.find('Value').text.replace(',', '.')
                        nominal = float(valute.find('Nominal').text)
                        history.append(float(value) / nominal)
                        break
        return history[::-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ {currency}: {str(e)}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
def format_number(number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏ –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç—å—é"""
    return f"{int(round(number, 0)):,}".replace(",", " ")

def calculate_moving_averages(prices):
    return {
        'week': sum(prices[-7:])/7 if len(prices) >=7 else None,
        'month': sum(prices[-30:])/30 if len(prices)>=30 else None,
        'year': sum(prices[-365:])/365 if len(prices)>=365 else None
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def generate_recommendation(current_price, ma_week, ma_month, ma_year):
    if None in [ma_week, ma_month, ma_year]:
        return "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

    conditions = [
        current_price > ma_week,
        current_price > ma_month,
        current_price > ma_year
    ]

    return ["üî¥ –ü—Ä–æ–¥–∞–≤–∞—Ç—å", "üü† –î–µ—Ä–∂–∞—Ç—å", "üü° –ü–æ–∫—É–ø–∞—Ç—å", "üü¢ –°–∏–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞"][sum(conditions)]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—É—Ä—Å–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
def generate_forecast(prices, days_back=30):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not prices or len(prices) < days_back:
        return None

    try:
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes = []
        for i in range(1, days_back):
            changes.append((prices[-i] - prices[-i - 1]) / prices[-i - 1])

        avg_change = sum(changes) / len(changes)

        # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        last_price = prices[-1]
        tomorrow = last_price * (1 + avg_change)
        week = last_price * (1 + avg_change) ** 7
        month = last_price * (1 + avg_change) ** 30

        return {
            'tomorrow': tomorrow,
            'week': week,
            'month': month,
            'trend': "üü¢ –†–æ—Å—Ç" if avg_change > 0 else "üîª –°–Ω–∏–∂–µ–Ω–∏–µ"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return None
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_crypto_prices(context, chat_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        crypto_prices = get_crypto_prices()
        moex_rates = print_rates()
        cbr_rates = get_financial_data()
        print(cbr_rates)
        message = "üìä *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:*\n"

        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        if crypto_prices:
            message += "\nüíé *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:*\n"
            for crypto_id, crypto_name in CRYPTO_IDS.items():
                if price := crypto_prices.get(crypto_id, {}).get('usd'):
                    message += f"{crypto_name}: ${price:.2f}\n"

        # –í–∞–ª—é—Ç—ã MOEX
        message += moex_rates

        # –í–∞–ª—é—Ç—ã –¶–ë –†–§
        message += "\nüè¶ *–ö—É—Ä—Å—ã –¶–ë –†–§:*\n"
        message +=f"–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {cbr_rates['key_rate']}%\n"
        message +=f"USD: {cbr_rates['USD']} ‚ÇΩ\n"
        message +=f"EUR: {cbr_rates['EUR']} ‚ÇΩ\n"
        message +=f"CNY: {cbr_rates['CNY']} ‚ÇΩ\n"


        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        if crypto_prices:
            message += "\nüîÆ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º:*\n"
            for crypto_id, crypto_name in CRYPTO_RECOMMENDATIONS.items():
                if prices := get_crypto_history(crypto_id):
                    ma = calculate_moving_averages(prices)
                    if current_price := (prices[-1] if prices else None):
                        recommendation = generate_recommendation(
                            current_price,
                            ma['week'],
                            ma['month'],
                            ma['year']
                        )
                        message += (
                            f"{crypto_name}: {recommendation}\n"
                            f"  ‚ñ´Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${format_number(current_price)}\n"
                            f"  ‚ñ´Ô∏è –°—Ä–µ–¥–Ω—è—è –∑–∞ –Ω–µ–¥–µ–ª—é: ${format_number(ma['week']) if ma['week'] else 'N/A'}\n"
                            f"  ‚ñ´Ô∏è –°—Ä–µ–¥–Ω—è—è –∑–∞ –º–µ—Å—è—Ü: ${format_number(ma['month']) if ma['month'] else 'N/A'}\n"
                            f"  ‚ñ´Ô∏è –°—Ä–µ–¥–Ω—è—è –∑–∞ –≥–æ–¥: ${format_number(ma['year']) if ma['year'] else 'N/A'}\n\n"
                        )
        # –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        if crypto_prices:
            message += "\nüîÆ *–ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º:*\n"
            for crypto_id, crypto_name in CRYPTO_RECOMMENDATIONS.items():
                if prices := get_crypto_history(crypto_id, days=60):
                    forecast = generate_forecast(prices)
                    if forecast:
                        message += (
                                    f"{crypto_name} ({forecast['trend']}):\n"
                                    f"  ‚ñ´Ô∏è –ó–∞–≤—Ç—Ä–∞: ~${format_number(forecast['tomorrow'])}\n"
                                    f"  ‚ñ´Ô∏è –ù–µ–¥–µ–ª—è: ~${format_number(forecast['week'])}\n"
                                    f"  ‚ñ´Ô∏è –ú–µ—Å—è—Ü: ~${format_number(forecast['month'])}\n\n"
                                )

        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–±–µ—Ä–õ–µ—Ö–∞. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 7:00. –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å '–õ–µ—Ö–∞ –ø—Ä–∏–≤–µ—Ç', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã.")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 7:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    chat_id = update.message.chat_id
    context.job_queue.run_daily(send_crypto_prices, time=time(hour=7, minute=0), days=(0, 1, 2, 3, 4, 5, 6),
                                chat_id=chat_id, context=context)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
        if not update.message or not update.message.text:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return

        text = update.message.text.lower().strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'")

        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        clean_text = re.sub(r'[^a-z–∞-—è—ë]', '', text)
        triggers = ["–ª–µ—Ö", "–ª–µ—Ö–∞", "alekseyss"]

        if any(trigger in clean_text for trigger in triggers):
            logger.info(f"–¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª: '{text}'")
            await send_crypto_prices(context, chat_id=update.message.chat_id)
        else:
            logger.info(f"–¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: '{text}'")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¢—ã –Ω–µ –≥–æ—Ç–æ–≤")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
