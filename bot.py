from cachetools import TTLCache, cached
import logging
import requests
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from datetime import time, datetime, timedelta
import xml.etree.ElementTree as ET
import re
import pandas as pd
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8116484548:AAFtMBtsnzAoWqxyMCZxPRUZlD39lM2xSgQ"
ALPHA_VANTAGE_API_KEY = "86MKCLMAXG8H8Q2U"
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ê–∫—Ü–∏–∏
MOEX_API_URL = "https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}.json"
MOEX_STOCKS = {
    "SBER": "–°–±–µ—Ä–±–∞–Ω–∫ üá∑üá∫",
    "GAZP": "–ì–∞–∑–ø—Ä–æ–º ‚õΩ",
    "GMKN": "–ù–æ—Ä–Ω–∏–∫–µ–ª—å ‚öôÔ∏è",
    "AFLT": "–ê—ç—Ä–æ—Ñ–ª–æ—Ç ‚úàÔ∏è (–¥–ª—è –ú–∞—Ä–∫—É—à–∏)",
    "MGNT": "–ú–∞–≥–Ω–∏—Ç üõí",
    "FIVE": "X5 Group üõçÔ∏è",
    "YNDX": "–Ø–Ω–¥–µ–∫—Å üåê",
    "PIKK": "–ü–ò–ö üèóÔ∏è"
}

STOCKS = {
    "foreign": {
        "AAPL": "Apple üçè",
        "MSFT": "Microsoft üíª",
        "TSLA": "Tesla üöó",
        "AMZN": "Amazon üì¶",
        "GOOGL": "Google üåê"
    }
}

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
CRYPTO_IDS = {
    "bitcoin": "Bitcoin ü™ô",
    "ethereum": "Ethereum ‚õìÔ∏è",
    "litecoin": "Litecoin üíé",
    "ripple": "Ripple üåä",
    "cardano": "Cardano üé¥",
    "solana": "Solana ‚òÄÔ∏è",
    "polkadot": "Polkadot ‚ö´",
    "dogecoin": "Dogecoin üê∂",
    "tether": "Tether (USDT) üíµ",
    "streamr": "Streamr DATAcoin üìä"
}

# –í–∞–ª—é—Ç—ã
CURRENCIES = ["USD", "EUR", "CNY"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: get_crypto_prices, get_currency_rates, 
# get_key_rate, get_crypto_history, get_currency_history, 
# calculate_changes –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_moex_stocks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å MOEX"""
    results = {}
    for ticker, name in MOEX_STOCKS.items():
        try:
            response = requests.get(MOEX_API_URL.format(ticker=ticker), params={
                "iss.meta": "off",
                "iss.only": "marketdata"
            })
            if response.status_code == 200:
                data = response.json()
                price = data['marketdata']['data'][0][12]  # –ü–æ–ª–µ 'LAST'
                results[ticker] = {
                    "name": name,
                    "price": float(price) if price else "N/A",
                    "change": "N/A"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {str(e)}")
            results[ticker] = {"name": name, "price": "N/A", "change": "N/A"}
    return results

cache = TTLCache(maxsize=32, ttl=300)
@cached(cache)
def get_stock_prices(stock_type: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö"""
    if stock_type == "russian":
        return get_moex_stocks()
    
    # –î–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π
    stocks = STOCKS[stock_type]
    results = {}
    for symbol, name in stocks.items():
        try:
            url = f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={ALPHA_VANTAGE_API_KEY}"
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json().get("Global Quote", {})
                results[symbol] = {
                    "name": name,
                    "price": data.get("05. price", "N/A"),
                    "change": data.get("10. change percent", "N/A")
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {str(e)}")
            results[symbol] = {"name": name, "price": "N/A", "change": "N/A"}
    return results

def calculate_moving_average(prices, period):
    """–†–∞—Å—á–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ"""
    if len(prices) < period:
        return None
    return sum(prices[-period:]) / period

def get_recommendation(price, ma_week, ma_month, ma_year):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö"""
    if price > ma_year and price > ma_month and price > ma_week:
        return "üü¢ –ü–æ–∫—É–ø–∞—Ç—å (—Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç)"
    elif price < ma_year and price < ma_month and price < ma_week:
        return "üî¥ –ü—Ä–æ–¥–∞–≤–∞—Ç—å (—Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ)"
    else:
        return "üü° –î–µ—Ä–∂–∞—Ç—å (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)"

def calculate_missed_profit(prices, investment=100):
    """–†–∞—Å—á–µ—Ç —É–ø—É—â–µ–Ω–Ω–æ–π –≤—ã–≥–æ–¥—ã"""
    if len(prices) < 2:
        return None
    first_price = prices[0][1]
    last_price = prices[-1][1]
    profit = (last_price - first_price) / first_price * investment
    return profit

def get_crypto_prices():
    url = 'https://api.coingecko.com/api/v3/simple/price'
    params = {
        'ids': 'bitcoin,ethereum,litecoin,the-open-network,tramcoin,ripple,cardano,solana,polkadot,dogecoin',
        'vs_currencies': 'usd'
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§
def get_currency_rates():
    url = 'https://www.cbr.ru/scripts/XML_daily.asp'
    response = requests.get(url)
    if response.status_code == 200:
        root = ET.fromstring(response.content)
        rates = {}
        for valute in root.findall('Valute'):
            char_code = valute.find('CharCode').text
            value = valute.find('Value').text.replace(',', '.')
            nominal = valute.find('Nominal').text
            rates[char_code] = float(value) / float(nominal)
        return rates
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë –†–§
def get_key_rate():
    try:
        url = 'https://www.cbr.ru/hd_base/keyrate/'
        response = requests.get(url).text

        dates_match = re.search(r'"categories":\[(.+?)\]', response)
        values_match = re.search(r'"data":\[(.+?)\]', response)

        if not dates_match or not values_match:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
            return "N/A"

        dates = dates_match.group(1).split(',')
        values = values_match.group(1).split(',')

        all_data = [[date.replace('"', ''), float(value)] for date, value in zip(dates, values)]
        df = pd.DataFrame(all_data, columns=['Date', 'Rate'])
        df['Date'] = pd.to_datetime(df['Date'])

        latest_rate = df[df['Date'] == df['Date'].max()]['Rate'].values[0]
        return latest_rate
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        return "N/A"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
def get_crypto_history(crypto_id, days=5):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto_id}/market_chart"
    params = {
        "vs_currency": "usd",
        "days": days
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()["prices"]
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ {crypto_id}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
def get_currency_history(days=5):
    history = []
    for i in range(days):
        date = (datetime.now() - timedelta(days=i)).strftime("%d/%m/%Y")
        url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={date}"
        response = requests.get(url)
        if response.status_code == 200:
            root = ET.fromstring(response.content)
            rates = {}
            for valute in root.findall('Valute'):
                char_code = valute.find('CharCode').text
                value = valute.find('Value').text.replace(',', '.')
                nominal = valute.find('Nominal').text
                rates[char_code] = float(value) / float(nominal)
            history.append((date, rates))
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –∑–∞ {date}")
    return history

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–æ–≤
def calculate_changes(prices):
    if not prices or len(prices) < 2:
        return None
    first_price = prices[0][1]
    last_price = prices[-1][1]
    change = ((last_price - first_price) / first_price) * 100
    return change

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö
# Create a cache with a TTL of 5 minutes
cache = TTLCache(maxsize=32, ttl=300)
@cached(cache)
def get_moex_stocks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å MOEX"""
    results = {}
    for ticker, name in MOEX_STOCKS.items():
        try:
            response = requests.get(MOEX_API_URL.format(ticker=ticker), params={
                "iss.meta": "off",
                "iss.only": "marketdata"
            })
            if response.status_code == 200:
                data = response.json()
                price = data['marketdata']['data'][0][12]  # –ü–æ–ª–µ 'LAST'
                results[ticker] = {
                    "name": name,
                    "price": float(price) if price else "N/A",
                    "change": "N/A"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {str(e)}")
            results[ticker] = {"name": name, "price": "N/A", "change": "N/A"}
    return results

cache = TTLCache(maxsize=32, ttl=300)
@cached(cache)
def get_stock_prices(stock_type: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö"""
    if stock_type == "russian":
        return get_moex_stocks()
    
    # –î–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π
    stocks = STOCKS[stock_type]
    results = {}
    for symbol, name in stocks.items():
        try:
            url = f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={ALPHA_VANTAGE_API_KEY}"
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json().get("Global Quote", {})
                results[symbol] = {
                    "name": name,
                    "price": data.get("05. price", "N/A"),
                    "change": data.get("10. change percent", "N/A")
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {str(e)}")
            results[symbol] = {"name": name, "price": "N/A", "change": "N/A"}
    return results


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—É—Ä—Å–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –≤–∞–ª—é—Ç, –∞–∫—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
async def send_crypto_prices(context, chat_id):
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    crypto_prices = get_crypto_prices()
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    currency_rates = get_currency_rates()
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É
    key_rate = get_key_rate()

    if crypto_prices and currency_rates:
        message = "üìä *–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        for crypto, price in crypto_prices.items():
            crypto_name = CRYPTO_IDS.get(crypto, crypto.capitalize())
            message += f"{crypto_name}: ${price['usd']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        message += "\nüí± *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        for currency in CURRENCIES:
            rate = currency_rates.get(currency, "N/A")
            message += f"{currency}/RUB: {rate} —Ä—É–±.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É
        message += f"\nüè¶ *–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§:* {key_rate}%\n"

        # –ë–ª–æ–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
        message += "\nüìà *–¢–æ–ø —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (MOEX):*\n"
        ru_stocks = get_stock_prices("russian")
        for data in ru_stocks.values():
            if data["price"] != "N/A":
                price = f"{float(data['price']):.2f}‚ÇΩ"
                message += f"{data['name']}: {price}\n"
            else:
                message += f"{data['name']}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        # –ë–ª–æ–∫ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π
        message += "\nüåç *–¢–æ–ø –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∞–∫—Ü–∏–π:*\n"
        us_stocks = get_stock_prices("foreign")
        for data in us_stocks.values():
            if data["price"] != "N/A":
                price = f"{float(data['price']):.2f}$"
                change = data["change"].replace("%", "") if data["change"] != "N/A" else "0"
                arrow = "üìà" if float(change) >= 0 else "üìâ"
                message += f"{data['name']}: {price} ({arrow} {change}%)\n"
            else:
                message += f"{data['name']}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="Markdown")
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–±–µ—Ä–õ–µ—Ö–∞. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 7:00. –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å '–õ–µ—Ö–∞ –ø—Ä–∏–≤–µ—Ç', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã.")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 7:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    chat_id = update.message.chat_id
    context.job_queue.run_daily(send_crypto_prices, time=time(hour=7, minute=0), days=(0, 1, 2, 3, 4, 5, 6), chat_id=chat_id, context=context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    text = update.message.text.lower()
    if "–ª–µ—Ö" in text or "alekseyss" in text:
        # –ü–µ—Ä–µ–¥–∞–µ–º chat_id —è–≤–Ω–æ
        await send_crypto_prices(context, chat_id=update.message.chat_id)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
